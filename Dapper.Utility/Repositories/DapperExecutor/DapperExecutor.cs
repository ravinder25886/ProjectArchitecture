using System.Data;

using Dapper;

using RS.Dapper.Utility.Connections;
using RS.Dapper.Utility.Resolver;

namespace RS.Dapper.Utility.Repositories.DapperExecutor;
/// <summary>
/// Provides generic methods to execute SQL commands and queries using Dapper.
/// </summary>
public class DapperExecutor(IDatabaseResolver databaseResolver,DapperContext context) : IDapperExecutor
{
    private readonly IDatabaseResolver _databaseResolver = databaseResolver;
    private readonly DapperContext _context = context;
    /// <summary>
    /// Executes a command asynchronously that does not return a result set.
    /// Typically used for INSERT, UPDATE, DELETE statements or stored procedures.
    /// </summary>
    /// <param name="sql">The SQL command text or stored procedure name to execute.</param>
    /// <param name="param">An optional object containing parameters to pass to the command.</param>
    /// <param name="commandType">The type of command (Text or StoredProcedure). Default is Text.</param>
    /// <returns>The number of rows affected.</returns>
    public async Task<int> ExecuteAsync(string dbNameKey,string sql, object? param = null, CommandType commandType = CommandType.StoredProcedure)
    {
        using var conn = _databaseResolver.GetConnection(dbNameKey);
        return await conn.ExecuteAsync(sql, param, commandType: commandType);
    }
    /// <summary>
    /// Executes a command asynchronously that returns a single scalar value.
    /// Commonly used to retrieve autogenerated keys or single values from queries.
    /// </summary>
    /// <typeparam name="T">The expected return type of the scalar value.</typeparam>
    /// <param name="sql">The SQL command text or stored procedure name to execute.</param>
    /// <param name="param">An optional object containing parameters to pass to the command.</param>
    /// <param name="commandType">The type of command (Text or StoredProcedure). Default is Text.</param>
    /// <returns>The scalar result cast to type T.</returns>
    public async Task<T?> ExecuteScalarAsync<T>(string dbNameKey, string sql, object? param = null, CommandType commandType = CommandType.StoredProcedure)
    {
        using var connection = _databaseResolver.GetConnection(dbNameKey);
        return await connection.ExecuteScalarAsync<T>(sql, param, commandType: commandType);
    }
    /// <summary>
    /// Executes a query asynchronously that returns the first record or default if none found.
    /// Useful for retrieving a single entity or model from the database.
    /// </summary>
    /// <typeparam name="T">The type of the returned model or entity.</typeparam>
    /// <param name="sql">The SQL query or stored procedure name to execute.</param>
    /// <param name="param">An optional object containing parameters to pass to the query.</param>
    /// <param name="commandType">The type of command (Text or StoredProcedure). Default is Text.</param>
    /// <returns>The first record mapped to type T, or null if no records found.</returns>
    public async Task<T?> QueryFirstOrDefaultAsync<T>(string dbNameKey, string sql, object? param = null, CommandType commandType = CommandType.StoredProcedure)
    {
        using var connection = _databaseResolver.GetConnection(dbNameKey);
        return await connection.QueryFirstOrDefaultAsync<T>(sql, param, commandType: commandType);
    }
    /// <summary>
    /// Executes a query asynchronously that returns a collection of records.
    /// Useful for retrieving multiple entities or models from the database.
    /// </summary>
    /// <typeparam name="T">The type of the returned models or entities.</typeparam>
    /// <param name="sql">The SQL query or stored procedure name to execute.</param>
    /// <param name="param">An optional object containing parameters to pass to the query.</param>
    /// <param name="commandType">The type of command (Text or StoredProcedure). Default is Text.</param>
    /// <returns>An enumerable collection of records mapped to type T.</returns>
    public async Task<IEnumerable<T>> QueryAsync<T>(string dbNameKey, string sql, object? param = null, CommandType commandType = CommandType.StoredProcedure)
    {
        using var connection = _databaseResolver.GetConnection(dbNameKey);
        return await connection.QueryAsync<T>(sql, param, commandType: commandType);
    }
      /// <summary>
      /// Executes a query asynchronously that returns multiple result sets.
      /// This method uses Dapper's QueryMultipleAsync and allows reading multiple sequences from a single command.
      /// </summary>
      /// <param name="sql">The SQL query or stored procedure name to execute.</param>
      /// <param name="param">An optional object containing parameters to pass to the query.</param>
      /// <param name="commandType">The type of command (Text or StoredProcedure). Default is Text.</param>
      /// <returns>
      /// A <see cref="SqlMapper.GridReader"/> instance that can be used to read multiple result sets.
      /// The caller is responsible for disposing the GridReader after reading all results.
      /// </returns>
    public async Task<SqlMapper.GridReader> QueryMultipleAsync(string dbNameKey, string sql, object? param = null, CommandType commandType = CommandType.StoredProcedure)
    {
        using var connection = _databaseResolver.GetConnection(dbNameKey);
        return await connection.QueryMultipleAsync(sql, param, commandType: commandType);
    }
}
